@using System.Text.Json
@using System.Linq.Expressions
@inherits InputBase<string?>
@inject Microsoft.JSInterop.IJSRuntime JS

<div class="json-content">
    <span>{</span>
    <button type="button" class="j-btn-l j-btn-right" @onclick="CopyToClipboard"><i class="fas fa-copy"></i></button>
    @if (JsonObject != null)
    {
        <div style="margin-left:20px; min-width:500px">
            @foreach (var value in JsonObject)
            {
                <div>
                    @if (value.Value.ValueKind == JsonValueKind.Number || value.Value.ValueKind == JsonValueKind.True ||
                        value.Value.ValueKind == JsonValueKind.False || value.Value.ValueKind == JsonValueKind.Null)
                    {
                        <span class="property-name">"@value.Key"</span><span>:</span>
                        <span class="value-content value-number">@value.Value.ToString()</span>
                    }
                    else if (value.Value.ValueKind == JsonValueKind.String)
                    {
                        <span class="property-name">"@value.Key"</span><span>:</span>
                        <span class="value-content value-string">"@value.Value.ToString()"</span>

                    }
                    else if (value.Value.ValueKind == JsonValueKind.Array)
                    {
                        <span class="property-name">"@value.Key"</span><span>:</span>
                        <span class="value-content value-array">@value.Value.ToJsonString()</span>
                    }
                    else if (value.Value.ValueKind == JsonValueKind.Object)
                    {
                        <span class="property-name">"@value.Key"</span><span>:</span>
                        <span>
                            <span>{</span>
                            <InternalJsonEditor Value="@value.Value.ToJsonString()"
                                             ValueChanged="@(e => JsonObjectUpdated(value.Key, e))" KeyValues="KeyValues"></InternalJsonEditor>
                            <span>}</span>
                        </span>
                    }
                    @if (JsonObject.LastOrDefault().Key != value.Key)
                    {<span>,</span>}
                    @if (value.Value.ValueKind != JsonValueKind.Object)
                    {
                        <JsonItemEditor JsonObject="@JsonObject" JsonObjectChanged="@ValueUpdated" KeyValues="KeyValues"
                                        EditingPropertyName="@value.Key"></JsonItemEditor>
                    }
                    <span>
                        <button type="button" class="j-btn j-btn-danger" @onclick="@(() => RemoveValue(value.Key))">
                            <i class="fas fa-times"></i>
                        </button>
                    </span>
                </div>
            }
            <div>
                <JsonItemEditor JsonObject="@JsonObject" JsonObjectChanged="@ValueUpdated" KeyValues="KeyValues"></JsonItemEditor>
            </div>
        </div>
    }
    else
    {
        <div style="margin-left:20px;">
            <JsonItemEditor JsonObject="@JsonObject" JsonObjectChanged="@ValueUpdated" KeyValues="KeyValues"></JsonItemEditor>
        </div>
    }
    <span>}</span>
</div>
<ValidationMessage For="@ValidationFor" />

<style>
    .json-content {
        padding:5px;
        border:1px solid #ccc;
    }

    .j-btn {
        padding: 4px;
        border-radius: 4px;
        border: 1px solid #ccc;
        line-height: 1px;
        font-family: 'Wingdings 2';
        font-size: 10px;
    }

    .j-btn-l {
        padding: 8px;
        border-radius: 5px;
        border: 1px solid #ccc;
        line-height: 1px;
        font-family: 'Wingdings 2';
        font-size: 14px;
    }

    .j-btn-primary{
        color: darkblue;
    }

    .j-btn-danger {
        color: red;
    }

    .j-txt {
        padding:2px 5px;
        border-radius:5px;
        border:1px solid #ccc;
        width:100%;
        line-height:1.2em;
    }

    .j-btn-right {
        position: relative;
        margin-right:0px;
        margin-left:auto;
        display:block;
        margin-top:-23px;
    }

    .valid-c {
        color:red;
    }

    .property-name {
        padding: 3px;
        color: brown;
    }

    .d-btn {
        padding: 2px;
        font-size: 9px;
        line-height: 1px;
        color: red;
    }

    .value-content {
        padding: 3px;
        font-style: italic;
    }

    .value-string {
        color: darkgoldenrod;
    }

    .value-number {
        color: blueviolet;
    }

    .value-null {
        color: darkred;
    }

    .value-array {
        color: darkgreen;
    }

    .value-boolean {
        color: chocolate;
    }
</style>


@code {

    [Parameter] public Dictionary<string, string>? KeyValues { get; set; }
    [Parameter] public Expression<Func<string?>>? ValidationFor { get; set; }
    [Parameter] public string? FieldName { get; set; }

    private JsonObject? JsonObject { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        if (Value != null)
        {
            JsonObject = JsonNode.Parse(Value) as JsonObject;
        }
        await base.OnParametersSetAsync();
    }

    protected override bool TryParseValueFromString(string value, out string? result, out string? validationErrorMessage)
    {
        Console.WriteLine("JJ: " + value);
        result = value;
        validationErrorMessage = null;
        return true;
    }

    private void ValueUpdated(JsonObject jsonObject)
    {
        JsonObject = jsonObject;

        TryParseValueFromString(jsonObject.ToJsonString(), out string? JsonObjectString, out string? vm);
        ValueChanged.InvokeAsync(JsonObjectString);
        EditContext.NotifyFieldChanged(new FieldIdentifier(EditContext.Model, FieldName));

        StateHasChanged();
    }

    private void JsonObjectUpdated(string prop, string value)
    {
        if (JsonObject != null)
        {
            JsonObject[prop] = JsonNode.Parse(value);
            TryParseValueFromString(JsonObject.ToJsonString(), out string? JsonObjectString, out string? vm);
            ValueChanged.InvokeAsync(JsonObjectString);
            EditContext.NotifyFieldChanged(new FieldIdentifier(EditContext.Model, FieldName));
            StateHasChanged();
        }
    }

    private void RemoveValue(string prop)
    {
        if (JsonObject != null)
        {
            JsonObject.Remove(prop);
            // ValueChanged.InvokeAsync(JsonObject.ToJsonString());
            TryParseValueFromString(JsonObject.ToJsonString(), out string? JsonObjectString, out string? vm);
            ValueChanged.InvokeAsync(JsonObjectString);
            EditContext.NotifyFieldChanged(new FieldIdentifier(EditContext.Model, FieldName));
            StateHasChanged();
        }
    }

    private async Task CopyToClipboard()
    {
        await JS.InvokeAsync<string?>("CopyToClipboard", new object[] { Value });
    }
}
