@using System.Text.Json
@using System.Linq.Expressions

@if (JsonObject != null) {
    <div style="margin-left:20px; min-width:500px">
        @foreach (var value in JsonObject) {
            <div>
                @if (value.Value.ValueKind == JsonValueKind.Number || value.Value.ValueKind == JsonValueKind.True ||
               value.Value.ValueKind == JsonValueKind.False || value.Value.ValueKind == JsonValueKind.Null) {
                    <span class="property-name">"@value.Key"</span>

                    <span>:</span>
                    <span class="value-content value-number">@value.Value.ToString()</span>
                }
                else if (value.Value.ValueKind == JsonValueKind.String) {
                    <span class="property-name">"@value.Key"</span>

                    <span>:</span>
                    <span class="value-content value-string">"@value.Value.ToString()"</span>

                }
                else if (value.Value.ValueKind == JsonValueKind.Array) {
                    <span class="property-name">"@value.Key"</span>

                    <span>:</span>
                    <span class="value-content value-array">@value.Value.ToJsonString()</span>
                }
                else if (value.Value.ValueKind == JsonValueKind.Object) {
                    <span class="property-name">"@value.Key"</span>

                    <span>:</span>
                    @*<div style="margin-left:20px">*@
                    <span>
                        <span>{</span>
                        <InternalJsonEditor Value="@value.Value.ToJsonString()"
                                ValueChanged="@(e => JsonObjectUpdated(value.Key, e))" KeyValues="KeyValues"></InternalJsonEditor>
                        <span>}</span>
                    </span>
                    @*<div>@(((JsonObject)JsonObject.GetPropertyValue(value)).ToJsonString())</div>*@
                    @*</div>*@
                }
                @if (JsonObject.LastOrDefault().Key != value.Key) {
                    <span>,</span>
                }
                @if (value.Value.ValueKind != JsonValueKind.Object) {
                    <JsonItemEditor JsonObject="@JsonObject" JsonObjectChanged="@ValueUpdated" KeyValues="KeyValues"
                        EditingPropertyName="@value.Key"></JsonItemEditor>
                }
                <span><button type="button" class="j-btn j-btn-danger" @onclick="@(() => RemoveValue(value.Key))"><i class="fas fa-times"></i></button></span>
            </div>
        }
        <div>
            <JsonItemEditor JsonObject="@JsonObject" JsonObjectChanged="@ValueUpdated" KeyValues="KeyValues"></JsonItemEditor>
        </div>
    </div>
}
else {
    <JsonItemEditor JsonObject="@JsonObject" JsonObjectChanged="@ValueUpdated" KeyValues="KeyValues"></JsonItemEditor>
}


<style>
    .property-name {
        padding: 3px;
        color: brown;
    }

    .d-btn {
        padding: 2px;
        font-size: 9px;
        line-height: 1px;
        color: red;
    }

    .value-content {
        padding: 3px;
        font-style: italic;
    }

    .value-string {
        color: darkgoldenrod;
    }

    .value-number {
        color: blueviolet;
    }

    .value-null {
        color: darkred;
    }

    .value-array {
        color: darkgreen;
    }

    .value-boolean {
        color: chocolate;
    }
</style>

@code {

    [Parameter] public string? Value { get; set; }

    [Parameter] public EventCallback<string?> ValueChanged { get; set; }

    [Parameter] public Dictionary<string, string>? KeyValues { get; set; }

    private JsonObject? JsonObject { get; set; }

    protected override async Task OnParametersSetAsync() {
        try {
            if (Value != null) {
                JsonObject = JsonNode.Parse(Value) as JsonObject;
            }
        }
        catch (Exception ex) {

        }
        await base.OnParametersSetAsync();
    }

    private void ValueUpdated(JsonObject jsonObject) {
        JsonObject = jsonObject;
        ValueChanged.InvokeAsync(jsonObject.ToJsonString());
        StateHasChanged();
    }

    private void JsonObjectUpdated(string prop, string value) {
        if (JsonObject != null) {
            JsonObject[prop] = JsonNode.Parse(value);
            ValueChanged.InvokeAsync(JsonObject.ToJsonString());
            StateHasChanged();
        }
    }

    private void RemoveValue(string prop) {
        if (JsonObject != null) {
            JsonObject.Remove(prop);
            ValueChanged.InvokeAsync(JsonObject.ToJsonString());
            StateHasChanged();
        }
    }

}
