@using System.Text.Json

<button type="button" @onclick="@(() => AddNew1())" class="j-btn">
    @if (AddNew) {
        <i class="fas fa-minus"></i>
    }
    else {
        if (string.IsNullOrEmpty(EditingPropertyName)) {
            <i class="fas fa-plus"></i>
        }
        else {
            <i class="fas fa-edit"></i>
        }
    }
</button>

@if (AddNew) {
    <EditForm Model="JsonItem" OnValidSubmit="SaveNode">
        <DataAnnotationsValidator />
        <div class="new-item-container">
            @if (ValidationMsg != null) {
                <div class="valid-c">
                    @ValidationMsg
                </div>
            }
            <div class="" style="display:flex; gap: 0px 5px;">
                @if (JsonItem.ValueKind != JsonValueKind.False && JsonItem.ValueKind != JsonValueKind.Null) {
                    <div class="" style="flex-grow-1">
                        <label style="margin-bottom: 3px;">Property Name</label>
                        @if (string.IsNullOrEmpty(EditingPropertyName)) {
                            <InputText @bind-Value="@JsonItem.PropertyName" class="j-txt" />
                        }
                        else {
                            <InputText @bind-Value="@JsonItem.PropertyName" class="j-txt" readonly></InputText>
                        }
                        <ValidationMessage For="@(() => JsonItem.PropertyName)" />
                    </div>
                }
                <div class="" style="flex-grow-1">
                    <label style="margin-bottom: 3px;">Property Type</label>
                    <InputSelect TValue="JsonValueKind" @bind-Value="JsonItem.ValueKind" class="j-txt">
                        <option value="@JsonValueKind.Undefined">NULL</option>
                        <option value="@JsonValueKind.String">String</option>
                        <option value="@JsonValueKind.Number">Number</option>
                        <option value="@JsonValueKind.Object">Object</option>
                        <option value="@JsonValueKind.Array">Array</option>
                        <option value="@JsonValueKind.True">Boolean</option>
                        @if (string.IsNullOrEmpty(EditingPropertyName)) {
                            <option value="@JsonValueKind.Null">Json Block</option>
                            @if (KeyValues?.Count > 0) {
                                <option value="@JsonValueKind.False">Variable</option>
                            }
                        }
                    </InputSelect>
                    <ValidationMessage For="@(() => JsonItem.ValueKind)" />
                </div>
            </div>
            <div style="margin-top:5px;">
                <label style="margin-bottom:3px;">Value:</label>
                @if (JsonItem.ValueKind == JsonValueKind.String || JsonItem.ValueKind == JsonValueKind.Array) {
                    <InputText @bind-Value="JsonItem.Value" class="j-txt" />
                    <ValidationMessage For="@(() => JsonItem.Value)" />
                }
                else if (JsonItem.ValueKind == JsonValueKind.Number) {
                    <InputNumber TValue="double?" @bind-Value="JsonItem.NumericValue" class="j-txt"></InputNumber>
                    <ValidationMessage For="@(() => JsonItem.NumericValue)" />
                }
                else if (JsonItem.ValueKind == JsonValueKind.True) {
                    <InputSelect TValue="string" @bind-Value="JsonItem.Value" class="j-txt">
                        <option value=""></option>
                        <option value="true">TRUE</option>
                        <option value="false">FALSE</option>
                    </InputSelect>
                    <ValidationMessage For="@(() => JsonItem.Value)" />
                }
                else if (JsonItem.ValueKind == JsonValueKind.False && KeyValues?.Count > 0) {
                    <InputSelect TValue="string" @bind-Value="@JsonItem.Value" sclass="j-txt">
                        <option value="default(string?)"></option>
                        @foreach (var kv in KeyValues) {
                            <option Value="kv.Value">@kv.Key</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="@(()  => JsonItem.Value)" />
                }
                else if (JsonItem.ValueKind == JsonValueKind.Null) {
                    <InputTextArea @bind-Value="@JsonItem.Value" rows="5" class="j-txt"></InputTextArea>
                    <ValidationMessage For="@(() => JsonItem.Value)" />
                }
            </div>

            <div style="margin-top: 10px; padding-top:10px; border-top: 1px solid black;">
                <button type="submit" class="j-btn-l">
                    <i class="fas fa-check-square"></i>
                    Add
                </button>

                <button type="button" class="j-btn-l" @onclick="@(() => AddNew = false)">
                    <i class="fas fa-check-square"></i>
                    Cancel
                </button>
            </div>
        </div>
    </EditForm>
}

<style>


    .new-item-container {
        background: #fff;
        border: 1px solid #808080;
        padding: 10px;
    @*border-radius: 5px; box-shadow: 3px 3px 10px #1d1d1d;*@ width: 400px;
    }

    .button1 {
        padding: 10px;
        border-radius: 5px;
    }
</style>

@code {
    [Parameter] public JsonObject? JsonObject { get; set; }

    [Parameter] public EventCallback<JsonObject> JsonObjectChanged { get; set; }

    [Parameter] public Dictionary<string, string>? KeyValues { get; set; }

    [Parameter] public string? EditingPropertyName { get; set; }

    // private JsonValueKind ValueKind { get; set; } = JsonValueKind.Null;
    private bool AddNew = false;
    private string? ValidationMsg;

    //private string? PropertyName;
    //private string? Value;
    //private double? NumericValue;
    //private bool? BooleanValue;

    private JsonItem? JsonItem { get; set; }

    private void AddNew1() {
        AddNew = !AddNew;
        ValidationMsg = null;
        StateHasChanged();

    }

    protected override void OnParametersSet() {
        JsonItem = new JsonItem();
        @if (EditingPropertyName != null) {
            JsonItem.PropertyName = EditingPropertyName;

            var f = JsonObject?.GetPropertyValue(EditingPropertyName);
            JsonItem.ValueKind = f.ValueKind;
            if (f.ValueKind == JsonValueKind.String) {
                JsonItem.Value = f.ToString();
            }
            else if (f.ValueKind == JsonValueKind.Number) {
                JsonItem.NumericValue = Convert.ToDouble(f.ToString());
            }
            else if (f.ValueKind == JsonValueKind.True) {
                JsonItem.Value = "true";
            }
            else if (f.ValueKind == JsonValueKind.False) {
                JsonItem.Value = "false";
                JsonItem.ValueKind = JsonValueKind.True;
            }
            else if (f.ValueKind == JsonValueKind.Array) {
                string Value1 = f.ToJsonString();
                JsonItem.Value = Value1.Substring(1, Value1.Length - 2);
            }
            else if (f.ValueKind == JsonValueKind.Null) {
                JsonItem.ValueKind = JsonValueKind.Undefined;
            }

            Console.WriteLine(JsonSerializer.Serialize(JsonItem));
        }
    }

    async Task SaveNode() {
        try {
            ValidationMsg = null;
            if (string.IsNullOrWhiteSpace(EditingPropertyName) && JsonItem != null) {

                if (JsonObject == null) JsonObject = new JsonObject();

                if (JsonItem.ValueKind == JsonValueKind.String && !string.IsNullOrWhiteSpace(JsonItem.Value)) {
                    JsonObject.Add(JsonItem.PropertyName, new JsonString(JsonItem.Value));
                }
                else if (JsonItem.ValueKind == JsonValueKind.Number && JsonItem.NumericValue != null) {
                    JsonObject.Add(JsonItem.PropertyName, new JsonNumber(JsonItem.NumericValue.Value));
                }
                else if (JsonItem.ValueKind == JsonValueKind.Undefined) {
                    JsonObject.Add(JsonItem.PropertyName, new JsonNull());
                }
                else if (JsonItem.ValueKind == JsonValueKind.Object) {
                    JsonObject.Add(JsonItem.PropertyName, new JsonObject());
                }
                else if (JsonItem.ValueKind == JsonValueKind.Array && !string.IsNullOrEmpty(JsonItem.Value)) {
                    List<JsonNode> nodeArray = JsonItem.Value.Split(',').Select(x => JsonNode.Parse(x)).ToList();

                    JsonObject.Add(JsonItem.PropertyName, new JsonArray(nodeArray));
                }
                else if (JsonItem.ValueKind == JsonValueKind.True && JsonItem.Value != null) {
                    JsonObject.Add(JsonItem.PropertyName, new JsonBoolean(Convert.ToBoolean(JsonItem.Value)));
                }
                else if ((JsonItem.ValueKind == JsonValueKind.False || JsonItem.ValueKind == JsonValueKind.Null) && !string.IsNullOrEmpty(JsonItem.Value)) {

                    if (!JsonItem.Value.StartsWith("{")) JsonItem.Value = "{" + JsonItem.Value + "}";
                    var node = (JsonObject)JsonNode.Parse(JsonItem.Value);
                    var pr = node.GetPropertyNames();
                    if (pr?.Count > 0) {
                        foreach (var pn in pr) {
                            JsonObject.Add(pn, node.GetPropertyValue(pn));
                        }
                    }
                }
            }
            if (!string.IsNullOrEmpty(EditingPropertyName) && JsonObject != null) {
                if (JsonItem.ValueKind == JsonValueKind.String && !string.IsNullOrWhiteSpace(JsonItem.Value)) {
                    JsonObject[EditingPropertyName] = new JsonString(JsonItem.Value);
                }
                else if (JsonItem.ValueKind == JsonValueKind.Number && JsonItem.NumericValue != null) {
                    JsonObject[EditingPropertyName] = new JsonNumber(JsonItem.NumericValue.Value);
                }
                else if (JsonItem.ValueKind == JsonValueKind.Undefined) {
                    JsonObject[EditingPropertyName] = new JsonNull();
                }
                else if (JsonItem.ValueKind == JsonValueKind.Object) {
                    JsonObject[EditingPropertyName] = new JsonObject();
                }
                else if (JsonItem.ValueKind == JsonValueKind.Array && !string.IsNullOrEmpty(JsonItem.Value)) {
                    List<JsonNode> nodeArray = JsonItem.Value.Split(',').Select(x => JsonNode.Parse(x)).ToList();

                    JsonObject[EditingPropertyName] = new JsonArray(nodeArray);
                }
                else if (JsonItem.ValueKind == JsonValueKind.True && JsonItem.Value != null) {
                    JsonObject[EditingPropertyName] = new JsonBoolean(Convert.ToBoolean(JsonItem.Value));
                }
            }
            await JsonObjectChanged.InvokeAsync(JsonObject);
            JsonItem = null;
            AddNew = false;
        }
        catch (ArgumentException ex) {
            ValidationMsg = ex.Message;
        }
    }

    //private void SelectedValueKind(JsonValueKind jsonValueKind)
    //{
    //    ValueKind = jsonValueKind;
    //    ClearData();
    //}

    //private void ClearData()
    //{
    //    Value = null;
    //    NumericValue = null;
    //}
    }
